import os
import pytz
import pandas as pd 
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from acnportal import acnsim
from acnportal import algorithms

# Timezone of the ACN we are using.
timezone = pytz.timezone('Europe/Amsterdam')

# Start and End times are used when collecting data.
start = timezone.localize(datetime(2018, 9, 5))
end = timezone.localize(datetime(2018, 9, 6))

# How long each time discrete time interval in the simulation should be.
period = 5  # minutes

# Voltage of the network.
voltage = 220  # volts

# Default maximum charging rate for each EV battery.
default_battery_power = 32 * voltage / 1000 # kW

# Identifier of the site where data will be gathered.
site = 'caltech'

# Retrieve the API key from environment variables.
API_KEY = os.getenv('API_KEY')

# Generate events using the acnportal library.
events = acnsim.acndata_events.generate_events(
    API_KEY, site, start, end, period, voltage, default_battery_power
)


# Convert the events to a DataFrame.
df_events = pd.DataFrame([event.to_dict() for event in events])

# The `to_dict` method for each event object converts it to a dictionary.
# Now `df_events` is a DataFrame similar to `df1` in your previous code.

# Convert the connection and disconnection times to datetime.
df_events['connectionTime'] = pd.to_datetime(df_events['connection_time'])
df_events['disconnectTime'] = pd.to_datetime(df_events['disconnect_time'])

# Extract the hours and days from the connection times.
df_events['ArrivalHour'] = df_events['connectionTime'].dt.hour
df_events['DepartureHour'] = df_events['disconnectTime'].dt.hour
df_events['DayOfWeek'] = df_events['connectionTime'].dt.dayofweek

# Segregate the events into weekdays and weekends.
df_weekdays = df_events[df_events['DayOfWeek'].between(0, 4)]
df_weekends = df_events[df_events['DayOfWeek'].between(5, 6)]

def plot_distribution(df, title_suffix):
    arrival_counts = df['ArrivalHour'].value_counts().sort_index()
    departure_counts = df['DepartureHour'].value_counts().sort_index()
    
    width = 0.4  # Width of the bars
    hours = range(24)
    
    # Create positions for each bar
    arrival_positions = [hour - width/2 for hour in hours]
    departure_positions = [hour + width/2 for hour in hours]
    
    plt.figure(figsize=(12, 5))
    
    # Plot the bars for arrivals and departures side by side
    plt.bar(arrival_positions, arrival_counts.reindex(hours, fill_value=0), width=width, label='Arrival', align='center')
    plt.bar(departure_positions, departure_counts.reindex(hours, fill_value=0), width=width, label='Departure', align='center')
    
    plt.title(f'Average Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(hours)
    plt.legend()
    plt.tight_layout()

# Plot distributions for weekdays and weekends
plot_distribution(df_weekdays, 'Weekdays')
plot_distribution(df_weekends, 'Weekends')


plt.show()

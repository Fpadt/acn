import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import pytz
import os
import base64

# Fetch the API token from the environment variable
api_token = os.getenv('API_KEY')

# Define the time zone
timezone = pytz.timezone('Europe/Amsterdam')

# Start and End times are used when collecting data
start = timezone.localize(datetime(2018, 9, 5)).strftime('%a, %d %b %Y %H:%M:%S GMT')
end = timezone.localize(datetime(2018, 9, 6)).strftime('%a, %d %b %Y %H:%M:%S GMT')

# API endpoint
site_id = "caltech"  # Example site_id
url = f"https://ev.caltech.edu/api/v1/sessions/{site_id}?where=connectionTime>='{start}' and connectionTime<='{end}'&pretty"

# Make the HTTP request with Basic Authentication
response = requests.get(url, auth=HTTPBasicAuth(api_token, ''))

if response.status_code == 200:
    data = response.json()
    sessions = data['_items']  # Extract the list of session records

    # Convert this list of dictionaries to a DataFrame
    df1 = pd.DataFrame(sessions)
    print(df1.head())

    # processing df1
else:
    print("Failed to fetch data. Status code:", response.status_code)
    print("Response:", response.text)
    exit()  # Exit if the request failed

##Average Daily Arrival and Departure Distribution##

# Convert the columns to datetime
df1['connectionTime'] = pd.to_datetime(df1['connectionTime'])
df1['disconnectTime'] = pd.to_datetime(df1['disconnectTime'])

# Extract the hours and days
df1['ArrivalHour'] = df1['connectionTime'].dt.hour
df1['DepartureHour'] = df1['disconnectTime'].dt.hour
df1['DayOfWeek'] = df1['connectionTime'].dt.dayofweek

# Segregate df1 into weekdays and weekends
df_weekdays = df1[df1['DayOfWeek'].between(0, 4)]
df_weekends = df1[df1['DayOfWeek'].between(5, 6)]

def plot_distribution(arrival_df, departure_df, title_suffix):
    # Combine arrival and departure data into a single dataframe
    combined_df = pd.DataFrame({
        'Arrivals': arrival_df['ArrivalHour'].value_counts().sort_index(),
        'Departures': departure_df['DepartureHour'].value_counts().sort_index()
    })
    
    # Plot the grouped bar chart
    combined_df.plot(kind='bar', figsize=(10, 5))
    plt.title(f'Combined Arrival and Departure Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(range(24))
    plt.tight_layout()

# Separate arrival and departure dataframes for weekdays and weekends
arrival_weekdays = df_weekdays[['ArrivalHour']]
departure_weekdays = df_weekdays[['DepartureHour']]
arrival_weekends = df_weekends[['ArrivalHour']]
departure_weekends = df_weekends[['DepartureHour']]

#print to check
print("Weekend Arrivals:\n", arrival_weekends)
print("Weekend Departures:\n", departure_weekends)

# Plot distributions for weekdays (arrival and departure combined) and weekends (arrival and departure combined)
plot_distribution(arrival_weekdays, departure_weekdays, 'Weekdays')
plot_distribution(arrival_weekends, departure_weekends, 'Weekends')

plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import pytz #libary to work with timezones
import os
import base64
import sys 

# Fetch the API token from the environment variable (temporarily stored)
api_token = os.getenv('API_KEY')

# Define the time zone
timezone = pytz.timezone('Europe/Amsterdam')

# Define the start and end times for the data collection period
start = timezone.localize(datetime(2018, 9, 3)).strftime('%a, %d %b %Y %H:%M:%S GMT')
end = timezone.localize(datetime(2018, 9, 9)).strftime('%a, %d %b %Y %H:%M:%S GMT')

# Function to fetch data
def fetch_data(url):
    response = requests.get(url, auth=HTTPBasicAuth(api_token, ''))
    if response.status_code == 200:
        data = response.json()
        sessions = pd.DataFrame(data['_items'])
        next_link = data['_links'].get('next', {}).get('href')
        return sessions, next_link
    else:
        print("Failed to fetch data. Status code:", response.status_code)
        return pd.DataFrame(), None

# API endpoint with pagination handling
site_id = "caltech"  
initial_url = f"https://ev.caltech.edu/api/v1/sessions/{site_id}/?where=connectionTime>='{start}' and connectionTime<='{end}'&pretty"

# Fetch all pages of data
all_data = pd.DataFrame()
current_url = initial_url
while current_url:
    data, next_link = fetch_data(current_url)
    all_data = pd.concat([all_data, data])
    if next_link:
        current_url = f"https://ev.caltech.edu/api/v1/{next_link}"
    else:
        break

# Convert relevant columns to datetime
df1 = all_data
df1['connectionTime'] = pd.to_datetime(df1['connectionTime'])
df1['disconnectTime'] = pd.to_datetime(df1['disconnectTime'])


## Check the sorted DataFrame
#df1_sorted = df1.sort_values(by='doneChargingTime', ascending=True) #switch acending to False to see latest date
#print(df1_sorted.head())

##Average Daily Arrival and Departure Distribution##

# Extract the hours and days
df1['ArrivalHour'] = df1['connectionTime'].dt.hour
df1['DepartureHour'] = df1['disconnectTime'].dt.hour
df1['DayOfWeek'] = df1['connectionTime'].dt.dayofweek  #dt.day_name() for day name
df1['Date'] = df1['connectionTime'].dt.date


# Segregate df1 into weekdays and weekends
df_weekdays = df1[df1['DayOfWeek'].between(0, 4)]
df_weekends = df1[df1['DayOfWeek'].between(5, 6)]

## CHECK DISTRIBUTION

# Count occurrences of each hour for the entire dataset
arrival_distribution = df1['ArrivalHour'].value_counts().sort_index()
departure_distribution = df1['DepartureHour'].value_counts().sort_index()

# Count occurrences of each date for arrivals and departures
arrival_distribution_by_date = df1.groupby('Date')['ArrivalHour'].count()
departure_distribution_by_date = df1.groupby('Date')['DepartureHour'].count()

# Define the start and end dates for the plot range
start_date = datetime.strptime('Mon, 3 Sep 2018 00:00:00 GMT', '%a, %d %b %Y %H:%M:%S GMT').date()
end_date = datetime.strptime('Sun, 9 Sep 2018 23:59:59 GMT', '%a, %d %b %Y %H:%M:%S GMT').date()

##PLOTTING##

# Plot for the entire dataset using matplotlib directly
plt.figure(figsize=(15, 6))

# Plot for Arrival Distribution by Date
plt.subplot(1, 2, 1)
plt.plot(arrival_distribution_by_date, color='blue', marker='o', linestyle='-')
plt.title('Overall Arrival Distribution by Date')
plt.xlabel('Date')
plt.ylabel('Count')
plt.xticks(rotation=45)  # Rotate the x-labels for better readability
plt.xlim(start_date, end_date)  # Limit the x-axis

# Plot for Departure Distribution by Date
plt.subplot(1, 2, 2)
plt.plot(departure_distribution_by_date, color='green', marker='o', linestyle='-')
plt.title('Overall Departure Distribution by Date')
plt.xlabel('Date')
plt.ylabel('Count')
plt.xticks(rotation=45)  # Rotate the x-labels for better readability
plt.xlim(start_date, end_date)  # Limit the x-axis

plt.tight_layout()
plt.show()
sys.exit()

#print to check
print("Weekdays - Arrival and Departure Hours:\n", df_weekdays[['ArrivalHour', 'DepartureHour']])
#print("Weekends - Arrival and Departure Hours:\n", df_weekends[['ArrivalHour', 'DepartureHour']])

def plot_distribution(arrival_df, departure_df, title_suffix):
    # Combine arrival and departure data into a single dataframe
    combined_df = pd.DataFrame({
        'Arrivals': arrival_df['ArrivalHour'].value_counts().sort_index(),
        'Departures': departure_df['DepartureHour'].value_counts().sort_index()
    })
    
    # Plot the grouped bar chart
    combined_df.plot(kind='bar', figsize=(10, 5))
    plt.title(f'Combined Arrival and Departure Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(range(24))
    plt.tight_layout()

# Separate arrival and departure dataframes for weekdays and weekends
arrival_weekdays = df_weekdays[['ArrivalHour']]
departure_weekdays = df_weekdays[['DepartureHour']]
arrival_weekends = df_weekends[['ArrivalHour']]
departure_weekends = df_weekends[['DepartureHour']]


#print to check
#print("Weekend Arrivals:\n", arrival_weekends)
#print("Weekend Departures:\n", departure_weekends)

# Plot distributions for weekdays (arrival and departure combined) and weekends (arrival and departure combined)
plot_distribution(arrival_weekdays, departure_weekdays, 'Weekdays')
#plot_distribution(arrival_weekends, departure_weekends, 'Weekends')

plt.show()

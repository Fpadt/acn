import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import pytz
import os
import sys
import numpy as np

##Constants and configurations##

# Fetch the API token from the environment variable (temporarily stored)
api_token = os.getenv('API_KEY')

# Define the time zone
timezone = pytz.timezone('Europe/Amsterdam')

# Define the start and end times for the data collection period and x-axis plotting
start_datetime = timezone.localize(datetime(2018, 9, 3))
end_datetime = timezone.localize(datetime(2018, 9, 9))
start = start_datetime.strftime('%a, %d %b %Y %H:%M:%S GMT')
end = end_datetime.strftime('%a, %d %b %Y %H:%M:%S GMT')

# API endpoint with pagination handling
site_id = "caltech"  
initial_url = f"https://ev.caltech.edu/api/v1/sessions/{site_id}/?where=connectionTime>='{start}' and connectionTime<='{end}'&pretty"

##Function definitions##

# Function to fetch data
def fetch_data(url):
    response = requests.get(url, auth=HTTPBasicAuth(api_token, ''))
    if response.status_code == 200:
        data = response.json()
        sessions = pd.DataFrame(data['_items'])
        next_link = data['_links'].get('next', {}).get('href')
        return sessions, next_link
    else:
        print("Failed to fetch data. Status code:", response.status_code)
        return pd.DataFrame(), None

# Tried to make function to Fetch all pages of data, but failed
all_data = pd.DataFrame()
current_url = initial_url
while current_url:
    data, next_link = fetch_data(current_url)
    all_data = pd.concat([all_data, data])
    if next_link:
        current_url = f"https://ev.caltech.edu/api/v1/{next_link}"
    else:
        break

def process_data(df):
    df['connectionTime'] = pd.to_datetime(df['connectionTime'])
    df['doneChargingTime'] = pd.to_datetime(df['doneChargingTime']) #Time when of the last non-zero current draw recorded.
    df['disconnectTime'] = pd.to_datetime(df['disconnectTime']) #Time when the EV unplugged.
    df['ArrivalHour'] = df['connectionTime'].dt.hour
    df['DepartureHour'] = df['disconnectTime'].dt.hour
    df['DayOfWeek'] = df['connectionTime'].dt.dayofweek
    df['Date'] = df['connectionTime'].dt.date
    df['kWhDelivered'] = pd.to_numeric(df['kWhDelivered'], errors='coerce')
    return df

def calculate_kwh_per_hour(df):
    kwh_per_hour = {i: 0 for i in range(24)}
    for index, row in df.iterrows():
        start_hour = row['connectionTime'].hour
        end_hour = row['doneChargingTime'].hour
        duration_hours = (row['doneChargingTime'] - row['connectionTime']).total_seconds() / 3600
        kwh_per_session_hour = row['kWhDelivered'] / duration_hours if duration_hours > 0 else 0

        current_hour = start_hour
        while current_hour != end_hour:
            kwh_per_hour[current_hour] += kwh_per_session_hour
            current_hour = (current_hour + 1) % 24
    return kwh_per_hour

def plot_distribution(df, title, xlabel, ylabel, kind='bar', figsize=(10, 5), start_date=None, end_date=None):
    plt.figure(figsize=figsize)
    plot = df.plot(kind=kind)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    if start_date and end_date:
        plot.set_xlim(start_date, end_date)
    plt.tight_layout()
    plt.show()

def plot_combined_distribution(arrival_df, departure_df, title_suffix):
    combined_df = pd.DataFrame({
        'Arrivals': arrival_df['ArrivalHour'].value_counts().sort_index(),
        'Departures': departure_df['DepartureHour'].value_counts().sort_index()
    })
    combined_df.plot(kind='bar', figsize=(10, 5))
    plt.title(f'Combined Arrival and Departure Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(range(24))
    plt.tight_layout()

def plot_kwh_distribution(kwh_per_hour_df, title):
    plt.figure(figsize=(10, 5))
    kwh_per_hour_df['kWhDelivered'].plot(kind='bar')
    plt.title(f'{title} - kWh Delivered')
    plt.xlabel('Hour of Day')
    plt.ylabel('Total kWh Delivered')
    plt.xticks(range(24), kwh_per_hour_df['Hour'])
    plt.tight_layout()
    plt.show()

##Process all data
df1 = process_data(all_data)

# Calculate kWh Delivered per hour
kwh_per_hour = calculate_kwh_per_hour(df1)
kwh_per_hour_df = pd.DataFrame(list(kwh_per_hour.items()), columns=['Hour', 'kWhDelivered'])

##Data Aggregation##
kwh_delivered_by_date = df1.groupby(df1['Date'])['kWhDelivered'].sum() #not correct when charged over night

## Plotting ##
start_date = start_datetime.date()
end_date = end_datetime.date()
plot_distribution(kwh_delivered_by_date, 'Total kWh Delivered by Date', 'Date', 'Total kWh Delivered', kind='line', start_date=start_date, end_date=end_date)

plt.show()


# Plotting for kWh Delivered per Hour
plot_kwh_distribution(kwh_per_hour_df, 'Total kWh Delivered per Hour of Day')


#Plotting Arrival and Departure Distribution
# Segregate df1 into weekdays and weekends
df_weekdays = df1[df1['DayOfWeek'].between(0, 4)]
df_weekends = df1[df1['DayOfWeek'].between(5, 6)]

arrival_weekdays = df_weekdays[['ArrivalHour']]
departure_weekdays = df_weekdays[['DepartureHour']]
arrival_weekends = df_weekends[['ArrivalHour']]
departure_weekends = df_weekends[['DepartureHour']]

plot_combined_distribution(arrival_weekdays, departure_weekdays, 'Weekdays')
plot_combined_distribution(arrival_weekends, departure_weekends, 'Weekends')

plt.show()


